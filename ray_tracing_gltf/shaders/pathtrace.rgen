#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable


#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 2, rgba32f) uniform image2D history;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = B_CAMERA) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
}
cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  int   lightType;
  int   frame;
  int   samples;
  int   bounces;
  int   bounceSamples;
  float temporalAlpha;
}
pushC;

void main()
{
  // Initialize the random number
  vec3 hitValue  = vec3(0);

  for (int smpl = 0; smpl < pushC.samples; smpl++)
  {
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushC.frame * pushC.samples + smpl);
    float r1  = rnd(seed);
    float r2  = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
    vec2 subpixelJitter = pushC.samples == 1 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + subpixelJitter;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.hitValue     = vec3(0);
    prd.seed         = seed;
    prd.depth        = 0;
    prd.rayOrigin    = origin.xyz;
    prd.rayDirection = direction.xyz;

    traceRayEXT(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.rayOrigin,     // ray origin
                tMin,              // ray min range
                prd.rayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
    );

    hitValue += prd.hitValue;
  }

  hitValue /= pushC.samples;

  vec3 old_color = imageLoad(history, ivec2(gl_LaunchIDEXT.xy)).xyz;
  vec3 mix_color = mix(hitValue, old_color, pushC.temporalAlpha);

  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix_color, 1.f));
  imageStore(history, ivec2(gl_LaunchIDEXT.xy), vec4(mix_color, 1.f));
}
